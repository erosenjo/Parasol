/* simple symbolic cms */

// symbolics
symbolic int entries;
symbolic size logentries; 
symbolic size tables;

symbolic int cols;
symbolic size rows;
symbolic size logcols;

// hash polynomials (we're skipping 1 bc it's identity)
//const int[rows] polynomials = [size_to_int(i)+2 for i<rows];

// testing this out for hash polys
//const int[rows] polys = [Sys.random()+1 for i<rows];


/* record for symbolic arrays that are interleaved in loop */
// we have to break up flow id bc we don't get long enough regs in tofino
// dummy array to compute min/compare 2 32-bit numbers (size is 32w32 in precision p4 code)
// precision p4 code has 32 entries, but we don't need more than 1?
type cmsregs<<'a>> = {
    Array.t<<'a>> keys;
    Array.t<<'a>> counter;
    Array.t<<'a>> values;
    Array.t<<'a>> dummy_reg;
    Array.t<<'a>> dummy_reg2;
}

constr cmsregs<<'a>> create_cmsregs(int ent) = {
    keys = Array.create(ent);
    counter = Array.create(ent);
    values = Array.create(ent);
    dummy_reg = Array.create(1);
    dummy_reg2 = Array.create(1);
};


// create symbolic arrays
global cmsregs<<32>>[tables] arrs = [create_cmsregs(entries) for i<tables];

// cms structure (keeping reg width fixed for now)
global Array.t<<32>>[rows] cms = [Array.create(cols) for i<rows];


/* Events */
// pkt in switch
entry event ip_in (int key, int<<1>> insert, int<<8>> min_stg, int cacheval);
event add_val (int key, int<<1>> insert, int<<8>> min_stg, int cacheval);
// end of lucid program, send back to switch
exit event ip_out ();


/* externs */
extern log_miss(int key);
extern log_hit(int key);

/* Memops */
memop key_match(int memval, int newval) {
    if (memval == newval) { return 1; }
    else { return 0; }
}

memop incr(int memval, int incrval) {
	return memval + incrval;
}


memop get_minval(int memval, int diffval, int val) {
    bool check = diffval > 0x7fffff;
    if (check) {
        return val;
    }
}

memop compcache(int memval, int minval) {
    if (memval < minval) {
        return memval;
    } else { return minval; }
}

memop compincr(int memval, int minval) {
    if (memval+1 < minval) {
        return memval+1;
    } else { return minval; }
}

memop get_min(int memval, int diffval) {
    if (diffval > 0x7fffff) { // negative TODO: UNSIGNED
        return 1;
    } else {
        return 0;
    }
}



memop compute_min(int memval, int minval) {
    if (memval + 1 < minval) {
        return memval+1;
    } else {
        return minval;
    }
}

/* Handlers */
handle add_val(int key, int<<1>> insert, int<<8>> min_stg, int cacheval) {
    for (i < tables) {
        if (min_stg==(int<<8>>)(size_to_int(i)+1)) {
            int<<logentries>> idx = hash<<logentries>>(size_to_int(i+3),key);
            Array.set(arrs[i]#keys,idx,key);
            Array.setm(arrs[i]#counter,idx,incr,1);
            Array.set(arrs[i]#values,idx,cacheval);
        }
    }
}


handle ip_in (int key, int<<1>> insert, int<<8>> min_stg, int cacheval) {
    /* key value */
    int<<1>> matched = 0;

    int min_val = 0x7fffff; // signed ints? set this to max value
    int<<8>> min_stg_to_set = 0;

    for (i < tables) {
        // compute hash
        int<<logentries>> idx = hash<<logentries>>(size_to_int(i+3),key);
        // should do if matched==0, but too many stages
        int<<1>> match_1 = (int<<1>>) Array.getm(arrs[i]#keys,idx,key_match,key);


        int c = 0;

            if (match_1==1) {
                c = Array.update(arrs[i]#counter,idx,incr,1,incr,1);
                log_hit(key);
                matched=1;
            }
            else {
                c = Array.get(arrs[i]#counter,idx);
            }


        // compute the min as we go, even if we don't need it
        int diff = c - min_val; // negative --> new min value; pos --> keep min

        if (c < min_val) {
            min_stg_to_set = (int<<8>>) size_to_int(i)+1;
            //printf("MIN STG SET: %d",min_stg_to_set);
            //min_stg = (int<<8>>) size_to_int(i)+1;
            //printf("MIN STG: %d", min_stg);
            //if (min_stg_to_set !=  min_stg) { printf("STG ERROR!"); }
            min_val = c;
        }



    }
	/* actual cms */
    // if it's a cache miss, then let's log it in our cms
    bool notinserted = insert==0 && matched==0;
    // init values
    int min = 0x7fffffff;

    if (notinserted) {
        log_miss(key);
        for (i < rows) {
            int<<logcols>> idx = hash<<logcols>>(size_to_int(i+2),key);
            min = Array.update(cms[i], idx, compute_min, min, incr, 1);
        }

        // if cms count > thresh, let's insert
        // use MAT to decide if we're inserting
        // testing 63 as threshold for skewed
        // testing 80 as threshold for not skewed
        match (min, min_val) with
        | _, 0 -> { generate add_val(key,1,min_stg_to_set,key); } // cache slot was empty
        //| 0b00000000000000000000000000******,_ -> { generate ip_out(); } // below the threshold, so don't insert
        //| 0b00000000000000000000000000000***,_ -> { generate ip_out(); } // below the threshold, so don't insert
        | 0b00000000000000000000000000******,_ -> { generate ip_out(); } // below the threshold, so don't insert
        | 0b0000000000000000000000000100****,_ -> { generate ip_out(); } // below the threshold, so don't insert
        | 0b00000000000000000000000001010000,_ -> { generate ip_out(); } // below the threshold, so don't insert
        | _,_ -> { generate add_val(key,1,min_stg_to_set,key); }



    }

    else {  generate ip_out(); }


}
