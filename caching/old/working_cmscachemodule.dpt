/* cms-based caching module in lucid */

// hard coding this to be 32 bit width registers, bc externs won't let us do int<<'a>>


/* SYMBOLIC V2, sizes AND num of tables symbolic */

// TODO: POLYS/SEEDS, DUMMY REGS - MORE THAN 1?
// TODO: INTS ARE UNSIGNED

/* record for symbolic arrays that are interleaved in loop */
// we have to break up flow id bc we don't get long enough regs in tofino
// dummy array to compute min/compare 2 32-bit numbers (size is 32w32 in precision p4 code)
// precision p4 code has 32 entries, but we don't need more than 1?
type regs = {
    Array.t<<32>> keys;
    Array.t<<32>> counter;
    Array.t<<32>> values;
    Array.t<<32>> dummy_reg;
    int pos;
}

constr regs create_regs(int ent, int pos) = {
    keys = Array.create(ent);
    counter = Array.create(ent);
    values = Array.create(ent);
    dummy_reg = Array.create(1);
    pos = pos;
};

/* Memops */
memop key_match(int memval, int newval) {
    if (memval == newval) { return 1; }
    else { return 0; }
}

memop incr(int memval, int incrval) {
    return memval+incrval;
}

memop compute_min(int memval, int minval) {
    if (memval + 1 < minval) {
        return memval+1;
    } else {
        return minval;
    }
}

// Use maxint (0xffffffff) as a flag -- a counter value that can never be reached.
memop counter_incr_read(int memval, int minval) {
    // if the counter value is a new minimum, return the counter value.
    // otherwise, return MAXINT.
    if (memval + 1 < minval) {
        return memval + 1;
    } else {
        return 0xffffffff;
    }
}
memop counter_read(int memval, int minval) {
    // if the counter value is a new minimum, return the counter value.
    // otherwise, return MAXINT.
    if (memval < minval) {
        return memval;
    } else {
        return 0xffffffff;
    }
}



/* externs */
extern log_miss_cms(int key);
extern log_hit_cms(int key);

module Cmscache : {
    global type t<<'logent, 'tab, 'logcols, 'rows>>;
    constr t<<'logent, 'tab, 'logcols, 'rows>> create(int ent, int cols);

    event add_val(t<<'logent, 'tab, 'logcols, 'rows>> ca, int key, int<<1>> insert, int min_stg, int cacheval);

    fun int cache (t<<'logent, 'tab, 'logcols, 'rows>> ca, int key, int<<1>> insert, int min_stg, int cacheval) [start <= ca; end ca];

   
} {

    type t<<'logent, 'tab, 'logcols, 'rows>> = {
        regs['tab] arrs;
        int<<'logent>> dummy_var;
        Array.t<<32>>['rows] cms;
        int<<'logcols>> dummy_var2;
    }

    constr t<<'logent, 'tab, 'logcols, 'rows>> create(int ent, int cols) = {
        arrs = [create_regs(ent, size_to_int(i+1)) for i<'tab];
        dummy_var = 0;
        cms = [Array.create(cols) for i<'rows];
        dummy_var2 = 0;
    };



    event add_val(t<<'logent, 'tab, 'logcols, 'rows>> ca, int key, int<<1>> insert, int min_stg, int cacheval);

    handle add_val(t<<'logent, 'tab, 'logcols, 'rows>> ca, int key, int<<1>> insert, int min_stg, int cacheval) {
        // NOTE: precompute mht_idxes helps in some scenarios.
        int<<'logent>>['tab] mht_idxes = [hash<<'logent>>(size_to_int(i + 3),key) for i<'tab];
        for (i < 'tab) {
            if (min_stg==ca#arrs[i]#pos) {
                Array.set(ca#arrs[i]#keys,mht_idxes[i],key);
                Array.setm(ca#arrs[i]#counter,mht_idxes[i],incr,1);
                Array.set(ca#arrs[i]#values,mht_idxes[i],cacheval);
            }
        }
    }



    fun int cache (t<<'logent, 'tab, 'logcols, 'rows>> ca, int key, int<<1>> insert, int min_stg, int cacheval) {

        int<<1>> matched = 0;
        int min_val = 0xffffffff;
        int min_stg_to_set = 0;
        int c_or_maxint = 0;

        // NOTE: precompute mht_idxes helps in some scenarios.
        int<<'logent>>['tab] mht_idxes = [hash<<'logent>>(size_to_int(i + 3),key) for i<'tab];

        for (i < 'tab) {
            // init match vars, for each fid entry
            int match_1 = Array.getm(ca#arrs[i]#keys,mht_idxes[i],key_match,key);

            if (match_1==1) {   // else if match, incr counter
                matched = 1;
                c_or_maxint = Array.update(ca#arrs[i]#counter,mht_idxes[i],counter_incr_read,min_val,incr,1);
                // cache hit, log it
                //log_hit_cms(key);
            }
            else {  // else grab counter value
                c_or_maxint = Array.getm(ca#arrs[i]#counter,mht_idxes[i],counter_incr_read,min_val);
            }


           // MIN COMP, compute as we go
            if (c_or_maxint != 0xffffffff) {
                min_stg_to_set = size_to_int(i+1);
                min_val = c_or_maxint;
            }

        }

        /* cms */
        bool notinserted = insert==0 && matched==0;
        int min = 0xffffff;
        if (notinserted) {
            // cache miss, log it
            log_miss_cms(key);

            int<<'logcols>>['rows] cms_idxes = [hash<<'logcols>>(size_to_int(i+2),key) for i<'rows];
            for (i < 'rows) {
                min = Array.update(ca#cms[i], cms_idxes[i], compute_min, min, incr, 1);
            }
            // if cms count > thresh, let's insert
            // use MAT to decide if we're inserting
            // (or just compare against symbolic)
            match (min, min_val) with
            | _, 0 -> { return min_stg_to_set; } // cache slot was empty

            | 0b0000000000000000000000000010****,_ -> { return 0; } // below the threshold, so don't insert
            | 0b0000000000000000000000000011000*,_ -> { return 0; } // below the threshold, so don't insert 
            | 0b00000000000000000000000000110010,_ -> { return 0; } // below the threshold, so don't insert

            | _,_ -> { return min_stg_to_set; }

        }

        else { return 0; }  // not adding to cache, forward pkt

    }


}

/* symbolics */
symbolic int entries;
symbolic size logentries;
symbolic size tables;
symbolic int cols;
symbolic size logcols;
symbolic size rows;

global Cmscache.t<<logentries, tables, logcols, rows>> pc = Cmscache.create(entries,cols);
//global Cmscache.t<<7, 2, 7, 2>> pc = Precisioncache.create(128,128);

entry event ip_in(int key, int<<1>> insert, int min_stg, int cacheval);
exit event ip_out();

handle ip_in(int key, int<<1>> insert, int min_stg, int cacheval) {
    int min_stg_set = Cmscache.cache(pc,key,insert,min_stg,cacheval);
    if (min_stg_set == 0) { generate ip_out(); }
    else { generate Cmscache.add_val(pc,key,1,min_stg_set,cacheval); }
}



