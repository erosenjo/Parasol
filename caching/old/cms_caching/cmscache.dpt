/* simple symbolic cms */

// Optimized, hopefully without breaking the 
// implementation... (jsonch 5/4/22)

// symbolics
symbolic int entries;
symbolic size logentries; 
symbolic size tables;

symbolic int cols;
symbolic size rows;
symbolic size logcols;

symbolic int expire_thresh;

// hash polynomials (we're skipping 1 bc it's identity)
//const int[rows] polynomials = [size_to_int(i)+2 for i<rows];

// testing this out for hash polys
//const int[rows] polys = [Sys.random()+1 for i<rows];


/* record for symbolic arrays that are interleaved in loop */
// we have to break up flow id bc we don't get long enough regs in tofino
// dummy array to compute min/compare 2 32-bit numbers (size is 32w32 in precision p4 code)
// precision p4 code has 32 entries, but we don't need more than 1?
type cmsregs<<'a>> = {
    Array.t<<'a>> keys;
    Array.t<<'a>> times;
    Array.t<<'a>> counter;
    Array.t<<'a>> values;
    Array.t<<'a>> dummy_reg;
    int pos;
}

constr cmsregs<<'a>> create_cmsregs(int ent, int pos) = {
    keys = Array.create(ent);
    times = Array.create(ent);
    counter = Array.create(ent);
    values = Array.create(ent);
    dummy_reg = Array.create(1);
    pos = pos; // NOTE: include the position in the register so its computed at compile time.
};


// create symbolic arrays
global cmsregs<<32>>[tables] arrs = [create_cmsregs(entries, size_to_int(i + 1)) for i<tables];

// cms structure (keeping reg width fixed for now)
global Array.t<<32>>[rows] cms = [Array.create(cols) for i<rows];


/* Events */
// pkt in switch
entry event ip_in (int key, int<<1>> insert, int<<32>> min_stg, int cacheval, int timestamp);
event add_val (int key, int<<1>> insert, int<<32>> min_stg, int cacheval, int timestamp);
// end of lucid program, send back to switch
exit event ip_out ();


/* externs */
extern log_miss(int key);
extern log_hit(int key);
/* Memops */
memop key_match(int memval, int newval) {
    if (memval == newval) { return 1; }
    else { return 0; }
}

memop incr(int memval, int incrval) {
    return memval + incrval;
}


memop get_minval(int memval, int diffval, int val) {
    bool check = diffval > 0x7fffff;
    if (check) {
        return val;
    }
}

memop compcache(int memval, int minval) {
    if (memval < minval) {
        return memval;
    } else { return minval; }
}

memop compincr(int memval, int minval) {
    if (memval+1 < minval) {
        return memval+1;
    } else { return minval; }
}

memop compute_min(int memval, int minval) {
    if (memval + 1 < minval) {
        return memval+1;
    } else {
        return minval;
    }
}

// Use maxint (0xffffffff) as a flag -- a counter value that can never be reached. 
memop counter_incr_read(int memval, int minval) {
    // if the counter value is a new minimum, return the counter value. 
    // otherwise, return MAXINT. 
    if (memval + 1 < minval) {
        return memval + 1;
    } else {
        return 0xffffffff;
    }
}
memop counter_read(int memval, int minval) {
    // if the counter value is a new minimum, return the counter value. 
    // otherwise, return MAXINT. 
    if (memval < minval) {
        return memval;
    } else {
        return 0xffffffff;
    }
}

memop checktime(int memval, int newval) {
    if (newval-memval > expire_thresh) {
        return 1;
    } else {
        return 0;
    }
}


/* Handlers */
handle add_val(int key, int<<1>> insert, int<<32>> min_stg, int cacheval, int timestamp) {
    // NOTE: precompute mht_idxes helps in some scenarios. 
    int<<logentries>>[tables] mht_idxes = [hash<<logentries>>(size_to_int(i + 3),key) for i<tables];
    for (i < tables) {
        // NOTE: precompute the min_stage threshold and put it in the type, so it gets calculated at compile time. 
        if (min_stg==arrs[i]#pos) {
        // if (min_stg==(int<<8>>)(size_to_int(i)+1)) {
            // int<<logentries>> idx = hash<<logentries>>(size_to_int(i+3),key);
            Array.set(arrs[i]#keys,mht_idxes[i],key);
            Array.set(arrs[i]#times,mht_idxes[i],timestamp);
            Array.setm(arrs[i]#counter,mht_idxes[i],incr,1);
            Array.set(arrs[i]#values,mht_idxes[i],cacheval);
            // Array.set(arrs[i]#keys,idx,key);
            // Array.setm(arrs[i]#counter,idx,incr,1);
            // Array.set(arrs[i]#values,idx,cacheval);
        }
    }
}


handle ip_in (int key, int<<1>> insert, int<<32>> min_stg, int cacheval, int timestamp) {
    /* key value */
    int<<1>> matched = 0;
    int min_val = 0xffffffff; // signed ints? set this to max value
    int<<32>> min_stg_to_set = 0;
    int c_or_maxint = 0;

    // NOTE: precompute hash. Not sure if this helps or not. 
    int<<logentries>>[tables] mht_idxes = [hash<<logentries>>(size_to_int(i+3),key) for i<tables];
    for (i < tables) {
        // compute hash
        // int<<logentries>> idx = hash<<logentries>>(size_to_int(i+3),key);
        // should do if matched==0, but too many stages
        // save a stage by not casting
        // NOTE: save stages by avoiding cast operations whenever possible. 
        int match_1 = Array.getm(arrs[i]#keys,mht_idxes[i],key_match,key);
        int expire = Array.getm(arrs[i]#times,mht_idxes[i],checktime,timestamp);
        //printf("KEYCHECKMATCH, %d", (int<<32>>)match_1);

        //int diff = 0;
        if (match_1==1) {   // else if match, incr counter
            matched=1;
            //min_val = Array.update(arrs[i]#counter,idx,incr,1,compincr,min_val);
            // c_or_maxint = Array.update(arrs[i]#counter,mht_idxes[i],incr,1,incr,1);
            // NOTE: big optimization here, tricky and hopefully correct... use maxint as a flag 
            // that indicates, "this is not the new minimum".
            c_or_maxint = Array.update(arrs[i]#counter,mht_idxes[i],counter_incr_read,min_val,incr,1);

            //printf("COUNT %d", c);
            // cache hit, log it
            //log_hit(key);
        }

        else { // not a match, so grab counter and see if min
            //min_val = Array.getm(arrs[i]#counter,idx,compcache,min_val);
            // c_or_maxint = Array.get(arrs[i]#counter,mht_idxes[i]);
            c_or_maxint = Array.getm(arrs[i]#counter,mht_idxes[i], counter_incr_read, min_val); // stage 3.
        }

        // entry is expired, so we'll replace it
        if (expire == 1) { 
            min_stg_to_set = size_to_int(i+1);
            min_val = 0;
        }
        // compute the min as we go, even if we don't need it
        // if its not MAXINT, that means c is a new minumum value.
        else { if (c_or_maxint != 0xffffffff) {
            min_stg_to_set = size_to_int(i+1);
            min_val = c_or_maxint;
        }      }
        // int diff = c - min_val; // negative --> new min value; pos --> keep min
        // min_stg_to_set = (int<<8>>) Array.update_complex(arrs[i]#dummy_reg, 0, get_minval, diff, size_to_int(i), (int<<32>>) min_stg_to_set);
        // min_val = Array.update_complex(arrs[i]#dummy_reg2, 0, get_minval, diff, c, min_val);

    }
    /* actual cms */
    // if it's a cache miss, then let's log it in our cms
    bool notinserted = insert==0 && matched==0;
    // init values
    int min = 0x7fffffff;

    if (notinserted) {
        log_miss(key);
        int<<logcols>>[rows] cms_idxes = [hash<<logcols>>(size_to_int(i+2),key) for i<rows];
        for (i < rows) {
            //int<<logcols>> idx = hash<<logcols>>(size_to_int(i+2),key);
            //min = Array.update(cms[i], idx, compute_min, min, incr, 1);
            min = Array.update(cms[i], cms_idxes[i], compute_min, min, incr, 1);
        }

        // if cms count > thresh, let's insert
        // use MAT to decide if we're inserting
        match (min, min_val) with
        | _, 0 -> { generate add_val(key,1,min_stg_to_set,key, timestamp); } // cache slot was empty
        | 0b0000000000000000000000000010****,_ -> { generate ip_out(); } // below the threshold, so don't insert
        | 0b0000000000000000000000000011000*,_ -> { generate ip_out(); } // below the threshold, so don't insert
        | 0b00000000000000000000000000110010,_ -> { generate ip_out(); } // below the threshold, so don't insert


        //| 0b00000000000000000000000000******,_ -> { generate ip_out(); } // below the threshold, so don't insert
        //| 0b00000000000000000000000000000***,_ -> { generate ip_out(); } // below the threshold, so don't insert
        //| 0b00000000000000000000000000******,_ -> { generate ip_out(); } // below the threshold, so don't insert
        //| 0b0000000000000000000000000100****,_ -> { generate ip_out(); } // below the threshold, so don't insert
        //| 0b00000000000000000000000001010000,_ -> { generate ip_out(); } // below the threshold, so don't insert
        | _,_ -> { generate add_val(key,1,min_stg_to_set,key, timestamp); }



    }

    else {  generate ip_out(); }

  

}
