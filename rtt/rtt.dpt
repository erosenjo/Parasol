/* lucid version of measuring tcp rtt in data plane, spin'20 */
/* aka precursor to fridge */
/* match data pkts w corresponding acks to produce rtt sample */
/* multi-stg hash table to record outgoing pkts, delete once matched */
/* lazily expire and overwrite old records */
/*
optimizations: 
1. use hash for concat
2. precompute eack for syn case
3. fix compiler to allocate 6 hashers per stage
*/
/* symbolics */
symbolic int table_size;
symbolic size tables;
symbolic size log_tables;
symbolic int TS_EXPIRE_THRESHOLD;
/* consts */
// tcp flags
const int<8> TCP_FLAGS_F = 1; // fin
const int<8> TCP_FLAGS_S = 2; // syn
const int<8> TCP_FLAGS_R = 4; // rst
const int<8> TCP_FLAGS_P = 8; // psh
const int<8> TCP_FLAGS_A = 16; // ack
//const int<8> tcp_s_a = TCP_FLAGS_S+TCP_FLAGS_A;
const int<8> tcp_s_a = 18;
//const int<8> tcp_a_p = TCP_FLAGS_A + TCP_FLAGS_P;
const int<8> tcp_a_p = 24;
//const int TS_EXPIRE_THRESHOLD = 50000000;  // 50ms, 50*1000*1000
const int TS_LEGITIMATE_THRESHOLD = 2000000000; // 2000*1000*1000
/* Arrays */
global PairArray.t<32>[tables] pkt_tables = [PairArray.create(table_size) for i<tables];
/* Events */
packet event tcp_in(int<8> tcp_flags, int<16> len, int<4> ihl, int<4> data_offset, int seq_no, int ack_no, int srcAddr, int dstAddr, int<16> srcPort, int<16> dstPort, int<48> timestamp);
event tcp_out(int<1> pkt_type, int<7> dummy_bytes, int rtt) { skip; }
event dropped() { skip; }
/* Externs */
extern log_collision();
extern log_timeout(bool timeout);
extern log_rttsample(int sample);
extern log_test(int ack,int sample);
extern write_to_file();
/* Memops */
// memval1 is signature, memval2 is timestamp
memop insert(int memval1, int memval2, int newval1, int newval2) {
    bool existing_timestamp_is_old = (newval2-memval2) > TS_EXPIRE_THRESHOLD;
    bool current_entry_empty = memval1 == 0;
//    bool current_entry_match = memval1==newval1;
    if (existing_timestamp_is_old || current_entry_empty) {
        cell1 = newval1;
    } 
    if (existing_timestamp_is_old || current_entry_empty) {
        cell2= newval2;
    }
    //log_timeout(existing_timestamp_is_old);
    if (existing_timestamp_is_old || current_entry_empty) {
        return cell2;
    }
}
memop readval(int memval1, int memval2, int newval1, int newval2) {
    bool current_entry_matched = memval1 == newval1;
    bool timestamp_legitimate = (newval2 - memval2)<TS_LEGITIMATE_THRESHOLD;
    if (current_entry_matched && timestamp_legitimate) {
        cell1 = 0;
    }
    if (current_entry_matched && timestamp_legitimate) {
        cell2 = 0;
    }
    if (current_entry_matched && timestamp_legitimate) {
        return memval2;
    }
}
fun void drops() {
    generate dropped();
}
const int<26> zero26b = 0;
const int<2> zero2b = 0;
const int<16> zero16b = 0;
// compute eack for syn cases
fun int precompute_eack(int<16> len, int<4> ihl, int<4> data_offset, int seq_no) {
    int<32> tmp_1t=hash<32>(1,zero26b, ihl, zero2b);
    int<32> tmp_2t=hash<32>(1,zero26b, data_offset, zero2b);
    int<32> tmp_3t=hash<32>(1, zero16b, len);
    // int<32> tmp_3t=zero16b ^ len;
    // stage 2
    int<32> tmp_4t=tmp_1t+tmp_2t;
    // stage 3
    int<32> tmp_5t=tmp_3t-tmp_4t;
    // int<32> tmp_1=hash<32>(1,(int<26>)0 ^ ihl ^ (int<2>)0);
    // int<32> tmp_2=hash<32>(1,(int<26>)0 ^ data_offset ^ (int<2>)0);
    // int<32> tmp_3=(int<16>)0 ^ len;
    // int<32> tmp_4=tmp_1+tmp_2;
    // int<32> tmp_5=tmp_3-tmp_4;
    // int expected_ack = seq_no+tmp_5;
    // stage 4
    return seq_no+tmp_5t;
}
handle tcp_in(int<8> tcp_flags, int<16> len, int<4> ihl, int<4> data_offset, int seq_no, int ack_no, int srcAddr, int dstAddr, int<16> srcPort, int<16> dstPort, int<48> timestamp) {
    // decide if syn or ack
    int<2> pkt_type = 0;  // true is syn, false is ack
    // precompute eack for syn case to reduce the number of hash units used.
    int syn_eack = precompute_eack(len, ihl, data_offset, seq_no);
    match (tcp_flags, len) with
    | TCP_FLAGS_S,_ -> { pkt_type=1; }
    | tcp_s_a,_ -> {pkt_type=0;}
    | TCP_FLAGS_A,0b0000000000****** -> {pkt_type=0;}
    | TCP_FLAGS_A,0b000000000100**** -> {pkt_type=0;}
    | TCP_FLAGS_A,0b0000000001010000 -> {pkt_type=0;}
    | tcp_a_p,0b0000000000****** -> {pkt_type=0;}
    | tcp_a_p,0b000000000100**** -> {pkt_type=0;}
    | tcp_a_p,0b0000000001010000 -> {pkt_type=0;}
    // len < 80
    | _,0b0000000000****** -> {pkt_type=0;}
    | _,0b000000000100**** -> {pkt_type=0;}
    // len < 1600
    | _,0b000000********** -> {pkt_type=2; }
    | _,0b0000010********* -> {pkt_type=2; }
    | _,0b0000011000****** -> {pkt_type=2; }
    | _,0b0000011001000000 -> {pkt_type=2; }
    | TCP_FLAGS_R, _ -> {drops();}
    | TCP_FLAGS_F, _ -> {drops();}
    | _,_ -> {pkt_type=0;}
    if (pkt_type==0) { // ack pkt
        int pkt_signature = hash<32>(10398247, dstAddr, srcAddr, dstPort, srcPort, ack_no);
        int<log_tables>[tables] idxes = [hash<log_tables>(size_to_int(i+2), dstAddr, srcAddr, dstPort, srcPort, ack_no) for i < tables];
        //printf("ACK: %d", ack_no);
        //printf("SIG %d", pkt_signature);
        int rtt = 0;
        // for loop
        int short_time = timestamp[31:0];
         for (i < tables) {
            if (rtt==0) {
                //int<log_tables> hashed_location_1 = hash<log_tables>(polynomials[i], dstAddr, srcAddr, dstPort, srcPort, ack_no);
                //int<log_tables> hashed_location_1 = hash<log_tables>(size_to_int(i+2), dstAddr, srcAddr, dstPort, srcPort, ack_no);
            
                rtt = PairArray.update(pkt_tables[i], idxes[i], readval, pkt_signature, short_time, 0);
            
            }
        }
        if (rtt != 0) {
            //rtt = timestamp-rtt;
            //printf("MATCH!!");
            //log_test(ack_no,timestamp-rtt);
            log_rttsample(short_time-rtt);
        }
        generate tcp_out(0, 0, short_time-rtt);
    } 
else {
        if (pkt_type==1) {  // syn pkt
            syn_eack = syn_eack+1;
        }
        int pkt_signature = hash<32>(10398247, srcAddr, dstAddr, srcPort, dstPort, syn_eack);
        //printf("EACK: %d", syn_eack);
        //printf("SIG %d", pkt_signature);
        int<log_tables>[tables] idxes = [hash<log_tables>(size_to_int(i+2), srcAddr, dstAddr, srcPort, dstPort, syn_eack) for i < tables];
        int rtt = 0;
        int short_time = timestamp[31:0];
        for (i < tables) {
            if (rtt==0) {
                rtt = PairArray.update(pkt_tables[i], idxes[i], insert, pkt_signature, short_time, 0);
            }
        }
        //        if (rtt==0) { log_collision(); }
        generate tcp_out(1, 0, rtt);
    }
    // training, univ1_pt1
    //if (timestamp == 345002842034) {
    // testing, univ1_pt8
    //if (timestamp == 233286941007) {
    // testing, pt8-12
    if (timestamp==1308347705125) {
    // new training univ1_pt1-2: 682377427101
    //if (timestamp==682377427101) {
        write_to_file();
    }
    // return computed RTT, to send to controller or do whatever
    //generate tcp_out(pkt_type, rtt, 0);
}



