/* precision in lucid */
// basic algo:
// d hash functions (tables)
// for each hash table, compute index
// if key at index matches current packet, increment stored value
// else, if the stored value is less than the current min, updated min (and stage number)
// if key does not match any of the d tables, probabilistically recirculate
// if recirculated, updated value in min stage number
// prob recirc uses table w/ predetermined entries

/* NON SYMBOLIC VERSION */

/* consts */
// num entries for hash tables, precision p4 code has 32w65536
const int entries = 128;
size hsize = 7;
// polys for hash func (from precision p4 code)
// CAN WE HAVE 16 BIT HASH POLYNOMIALS IN LUCID
const int<<16>> poly1 = 32773;
const int<<16>> poly2 = 15717;
// no clue why these need to be different widths
const int<<3>> HASH_SEED_1 = 2;
const int<<5>> HASH_SEED_2 = 17;

/* reg arrays */
// we have to break up flow id bc we don't get long enough regs in tofino
global Array.t<<32>> fid_1_1 = Array.create(entries);
global Array.t<<32>> fid_1_2 = Array.create(entries);
global Array.t<<32>> fid_1_3 = Array.create(entries);
global Array.t<<32>> fid_1_4 = Array.create(entries);
global Array.t<<32>> counter_1 = Array.create(entries);
global Array.t<<32>> fid_2_1 = Array.create(entries);
global Array.t<<32>> fid_2_2 = Array.create(entries);
global Array.t<<32>> fid_2_3 = Array.create(entries);
global Array.t<<32>> fid_2_4 = Array.create(entries);
global Array.t<<32>> counter_2 = Array.create(entries);

// dummy array to compute min/compare 2 32-bit numbers (size is 32w32 in precision)
global Array.t<<32>> dummy_reg = Array.create(32);

/* Events */
// input: ipv4 src/dst addr, ipv4.protocol, tcp/udp src/dst ports, resubmit
entry event ip_in (int srcaddr, int dstaddr, int<<16>> sport, int<<16>> dport, int<<8>> proto, int<<3>> resubmit, int<<8>> resubmitted_min_stage);
// ip_out input: resubmit, routing info?
exit event ip_out ();

/* Memops */
memop fid_match(int memval, int newval) {
    if (memval == newval) { return 1; } 
    else { return 0; }
}

memop incr(int memval, int incrval) {
    return memval+incrval;
}

memop get_min(int memval, int diffval) {
    if (diffval > 0x7fffff) { // negative
        return 1;
    } else {
        return 2;
    }
}

handle ip_in (int srcaddr, int dstaddr, int<<16>> sport, int<<16>> dport, int<<8>> proto, int<<3>> resubmit, int<<8>> resubmitted_min_stage) {
    int<<1>> is_resubmitted = (int<<1>>) resubmit;
    // compute flow id (4 parts)
    // part 1 is ipv4 srcaddr, 2 is dstaddr
    // 3 is ports concatenated, [15:0] = src, [31:16] = dst
    // 4 is ipv4.protocol, vlan.vlan_id, concat w identity hash
    int fid_3 = sport ^ dport;
    int fid_4 = hash<<32>>(1, proto, (int<<24>>)0);

    // compute d hashes
    // precision p4 --> hash seed, fid 1, 3w0, fid 2, 3w0, fid 3, fid 4 / hash seed, fid 1, 2w0, fid 2, 2w0, fid 3, 1w0, fid 4
	// why do we need the 0s
    int<<hsize>> h1 = hash<<hsize>>(poly1, HASH_SEED_1,srcaddr,(int<<3>>)0,dstaddr,(int<<3>>)0,fid_3,fid_4);
    int<<hsize>> h2 = hash<<hsize>>(poly2, HASH_SEED_2,srcaddr,(int<<2>>)0,dstaddr,(int<<2>>)0,fid_3,(int<<1>>)0,fid_4);

    // for each stage, (if haven't already matched prev stg)
    // if !recirc, check if match
    int<<1>> match_1_1 = 0;
    int<<1>> match_1_2 = 0;
    int<<1>> match_1_3 = 0;
    int<<1>> match_1_4 = 0;
    int<<1>> match_2_1 = 0;
    int<<1>> match_2_2 = 0;
    int<<1>> match_2_3 = 0;
    int<<1>> match_2_4 = 0;
    // precision p4 code repeats if stmt so only one line of code per stmt (does it change resource allocation?
    // or can lucid break up if stmt?
    if (is_resubmitted==0) {
        match_1_1 = (int<<1>>) Array.getm(fid_1_1,h1,fid_match,srcaddr);
        match_1_2 = (int<<1>>) Array.getm(fid_1_2,h1,fid_match,dstaddr);
        match_1_3 = (int<<1>>) Array.getm(fid_1_3,h1,fid_match,fid_3);
        match_1_4 = (int<<1>>) Array.getm(fid_1_4,h1,fid_match,fid_4);
    }
    // if recirc and min stage - update flowid
    else if (is_resubmitted==1 && resubmitted_min_stage==1) {
        Array.set(fid_1_1,h1,srcaddr);
        Array.set(fid_1_2,h1,dstaddr);
        Array.set(fid_1_3,h1,fid_3);
        Array.set(fid_1_4,h1,fid_4);
    }

    // if recirc and min stage, incr value
    // if !recirc and match, incr value
    // can we treat ints as bools???
    int<<1>> match_1 = match_1_1 & match_1_2 & match_1_3 & match_1_4;
    int c1 = 0;
    if (is_resubmitted==1 && resubmitted_min_stage==1) {
        c1 = Array.update(counter_1,h1,incr,1,incr,1);
    }
    else {
        if (match_1==1) {
            c1 = Array.update(counter_1,h1,incr,1,incr,1);
        }	
        else {
            c1 = Array.get(counter_1,h1);
        }
    }
    if (is_resubmitted==0 && match_1==0) {	// if it's not resubmitted and we didn't match in the first array, try with the second
        match_2_1 = (int<<1>>) Array.getm(fid_2_1,h2,fid_match,srcaddr);
        match_2_2 = (int<<1>>) Array.getm(fid_2_2,h2,fid_match,dstaddr);
        match_2_3 = (int<<1>>) Array.getm(fid_2_3,h2,fid_match,fid_3);
        match_2_4 = (int<<1>>) Array.getm(fid_2_4,h2,fid_match,fid_4);
    }
    else {
        if (is_resubmitted==1 && resubmitted_min_stage==2) {
            Array.set(fid_2_1,h2,srcaddr);
            Array.set(fid_2_2,h2,dstaddr);
            Array.set(fid_2_3,h2,fid_3);
            Array.set(fid_2_4,h2,fid_4);
        }
    }      
    int<<1>> match_2 = match_2_1 & match_2_2 & match_2_3 & match_2_4;
    int c2 = 0;
    if (is_resubmitted==1 && resubmitted_min_stage==2) {
        c2 = Array.update(counter_2,h2,incr,1,incr,1);
    }
    else {
        if (match_2==1) {
            c2 = Array.update(counter_2,h2,incr,1,incr,1);
        }
        else {
            c2 = Array.get(counter_2,h2);
        }
    }

    // compute min as you go
    int diff = c1 - c2;

	// using dummy reg here to do comparison in stateful ALU
    int min_val = 0;
    resubmitted_min_stage = (int<<8>>) Array.getm(dummy_reg,0,get_min,diff);
    if (resubmitted_min_stage == 1) {
        min_val = c1;
    }
    else { 
        if (resubmitted_min_stage == 2) {
            min_val = c2;
        }
    }
    // if no match, probabilistically recirc
    if (is_resubmitted==0 && match_1==0 && match_2==0) {
		// to do probabilistic recirc, we gen random numbers
		// if they're w/in some range, then we decide to recirc
		// range is predetermined, takes into account min count
		int entropy_long = Sys.random();
		int<<12>> entropy_short = (int<<12>>)Sys.random();

		// either no action or recirc // gen ip_out, or gen new ip_in
		// if recirc, gen new ip_in event w/ resubmit = 1
		// generate ip_in(srcaddr, dstaddr, sport, dport, proto, vlan_id, 1, resubmitted_min_stage);
		// recirc action in p4 --> ig_intr_dprsr_md.resubmit_type = 1;
		// udpate ingress deparser to check for ^ ??
		// this table won't change if we're symbolic or not
		// min_val and entropy_long are ternary matches (for rounding), entropy_short is range
		// HOW DO WE DO TERNARY MATCHES IN LUCID???????
		// entries are from https://github.com/Princeton-Cabernet/p4-projects/blob/master/PRECISION-tofino/p4src/entries_better_32.p4inc
		match (min_val, entropy_long, entropy_short) with
		| _, _, _ -> { generate ip_out(); } // default is to just forward pkt, we're not recirculating


// short ranges
// 12w0..12w4095 0b************
// 12w0..12w2047 0b0***********
// 12w0..12w1364 0b00**********, 0b0100********, 0b010100******, 0b01010100****, 0b0101010100**, 0b010101010100
// 12w0..12w1023 0b00**********
// 12w0..12w818 0b000*********, 0b0010********, 0b0011000*****, 0b00110010****, 0b00110011000*, 0b001100110010
// 12w0..12w681 0b000*********, 0b00100*******, 0b0010100*****, 0b001010100***, 0b00101010100*
// 12w0..12w584 0b000*********, 0b001000******, 0b001001000***, 0b001001001000
// 12w0..12w511 0b000*********
// 12w0..12w454 0b0000********, 0b00010*******, 0b000110******, 0b0001110000**, 0b00011100010*, 0b000111000110
// 12w0..12w408 0b0000********, 0b00010*******, 0b00011000****, 0b000110010***, 0b000110011000
// 12w0..12w371 0b0000********, 0b000100******, 0b0001010*****, 0b00010110****, 0b0001011100**
// 12w0..12w340 0b0000********, 0b000100******, 0b00010100****, 0b0001010100**, 0b000101010100
// 12w0..12w314 0b0000********, 0b0001000*****, 0b00010010****, 0b000100110***, 0b00010011100*, 0b000100111010
// 12w0..12w291 0b0000********, 0b0001000*****, 0b0001001000**
// 12w0..12w272 0b0000********, 0b00010000****, 0b000100010000
// 12w0..12w255 0b0000********


    }
    else {
    	generate ip_out();
	}

}


