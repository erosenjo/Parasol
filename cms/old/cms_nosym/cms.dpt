/* simple fixed-size cms */

const int<<9>> collector_port = 0x84;

// seeds for hash func
const int HASH_SEED_1 = 22;
const int HASH_SEED_2 = 33;

// threshold for hh
const int thresh = 100;

// cms structure (2 rows, 128 cols)
global Array.t<<32>> cms1 = Array.create(128);
global Array.t<<32>> cms2 = Array.create(128);

/* Events */
// pkt in switch
entry event ip_in (int<<9>> igr_port, int src, int dst);
// report hh
event report(int src, int dst);
// end of lucid program, send back to switch
exit event ip_out (int<<9>> egr_port, int src, int dst);


/* Memops */
memop incr(int memval, int incrval) {
	return memval + incrval;
}
memop getmin(int memval, int compval) {
	if (memval  < compval) {
		return memval;
	} else {
		return compval;
	}
}




/* Handlers */
handle report(int src, int dst) {
	generate ip_out(collector_port, src, dst);
}
handle ip_in (int<<9>> igr_port, int src, int dst) {
	// get index w hash 1
	int<<7>> idx1 = hash<<7>>(HASH_SEED_1,src,dst);
	// increment row 1
	int min = Array.update(cms1, idx1, incr, 1, incr, 1);
	// get index w hash 2
	int<<7>> idx2 = hash<<7>>(HASH_SEED_2,src,dst);
	// increment row 2
	int val2 = Array.update(cms2, idx2, incr, 1, incr, 1);

	int x = 4 >>> 2;

	generate ip_out(igr_port, src, dst);
}
